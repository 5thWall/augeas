#! /usr/bin/ruby

# Read a file with a test description, run augtool against it and
# look at the diff between the original file and the .augnew file
# The test description can contain the following:
# commands - a string that is fed to augtool
# diff     - a hash mapping file names to the diff between that
#            file and the .augnew file
# echo     - boolean, when true show the whole ouput of augtool
# refresh  - boolean, when true print bad diffs in a form
#            that can be easily cut&pasted back into the test description

require 'find'

ROOT="/tmp/aug"

TOP_DIR=File::join(File::dirname(__FILE__), "..")
TEST_DIR=File::join(TOP_DIR, "tests")
AUGTOOL="#{TOP_DIR}/src/augtool"

ARGV.each do |test|
    Find.find(ROOT) do |path|
        if File::file?(path) && File::fnmatch?("*.augnew", path)
            File::delete(path)
        end
    end
    commands = nil
    diff = {}
    echo=false
    refresh=false

    eval(IO::read(test))
    redir = echo ? "" : "> /dev/null"
    print "Test #{File::basename(test, ".rb")} ... "
    IO.popen("#{AUGTOOL} #{redir}", "w") do |io|
        io.print(commands)
        io.puts("\nquit")
    end
    success=true
    msgs = []
    diff.each do |file, exp|
        file = File::join(ROOT, file)
        if ! File::exist?("#{file}.augnew")
            msgs << "Expected file #{file}.augnew"
            success=false
        else
            act=`diff -u #{file} #{file}.augnew`
            act.gsub!(/^(--- #{file}).*$/, '\1')
            act.gsub!(/^(\+\+\+ #{file}\.augnew).*$/, '\1')
            if ! exp.nil? && act != exp
                success=false
                if ! refresh
                    msgs << act
                else
                    msgs << act.gsub(/\t/, '\\t')
                end
            end
        end
    end
    files = diff.keys.collect { |f| File::join(ROOT, "#{f}.augnew") }
    Find.find(ROOT) do |path|
        if File::file?(path) && File::fnmatch?("*.augnew", path) &&
                ! files.include?(path)
            success=false
            msgs << "Unexpected file #{path}"
        end
    end
    if success
        puts "OK"
    else
        puts "FAIL"
        msgs.each { |m| puts m }
    end
end
