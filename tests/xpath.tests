# Tests of the XPath matching

# Blank lines and lines starting with '#' are ignored
#
# Each test consists of one line declaring the test followed by a complete
# list of the expected result of the match.
#
# The test is declared with a line 'test NAME MATCH'. A result is either
# just a path (meaning that the value associated with that node must be
# NULL) or of the form PATH = VALUE, meaning that the value for the node at
# PATH must be VALUE
#
# The MATCH XPath expression is matched against a fixed tree (the one from the
# root/ subdirectory) and the result of the aug_match is compared with the
# results listed in the test

# Very simple to warm up
test wildcard /files/etc/hosts/*/ipaddr
     /files/etc/hosts/1/ipaddr = 127.0.0.1
     /files/etc/hosts/2/ipaddr = 172.31.122.14

# Compare the value of the current node with a constant
test self-value /files/etc/hosts/*/ipaddr[ value() = '127.0.0.1' ]
     /files/etc/hosts/1/ipaddr = 127.0.0.1

# Find nodes that have a child named 'ipaddr' with a fixed value
test child-value /files/etc/hosts/*[ipaddr = '127.0.0.1']
     /files/etc/hosts/1

# Find nodes that have a child 'ipaddr' that has no value
test child-nil-value /files/etc/hosts/*[ipaddr = '']

# Find nodes that have no value
test self-nil-value /files/etc/hosts/*[value() = '']
     /files/etc/hosts/1
     /files/etc/hosts/2

# Match over two levels of the tree
test two-wildcards /files/etc/*/*[ipaddr = '127.0.0.1']
     /files/etc/hosts/1

test pam-system-auth /files/etc/pam.d/*/*[module = 'system-auth']
     /files/etc/pam.d/login/2
     /files/etc/pam.d/login/4
     /files/etc/pam.d/login/5
     /files/etc/pam.d/login/8
     /files/etc/pam.d/postgresql/1
     /files/etc/pam.d/postgresql/2
     /files/etc/pam.d/newrole/1
     /files/etc/pam.d/newrole/2
     /files/etc/pam.d/newrole/3

# Multiple predicates are treated with 'and'
test pam-two-preds /files/etc/pam.d/*/*[module = 'system-auth'][type = 'account']
     /files/etc/pam.d/login/4
     /files/etc/pam.d/postgresql/2
     /files/etc/pam.d/newrole/2

# Find nodes that have siblings with a given value
test pam-two-preds-control /files/etc/pam.d/*/*[module = 'system-auth'][type = 'account']/control
     /files/etc/pam.d/login/4/control = include
     /files/etc/pam.d/postgresql/2/control = include
     /files/etc/pam.d/newrole/2/control = include

# last() gives the last node with a certain name
test last /files/etc/hosts/*[ipaddr = "127.0.0.1"]/alias[last()]
     /files/etc/hosts/1/alias[3] = galia

# We can get nodes counting from the right with 'last()-N'
test last-minus-one /files/etc/hosts/*[ipaddr = "127.0.0.1"]/alias[ last() - 1 ]
     /files/etc/hosts/1/alias[2] = galia.watzmann.net

# Make sure we look at all nodes with a given label (ticket #23)
test transparent-multi-node /files/etc/ssh/sshd_config/AcceptEnv/10
     /files/etc/ssh/sshd_config/AcceptEnv[2]/10 = LC_ADDRESS

test abbrev-descendants /files/etc//1
     /files/etc/apt/sources.list/1
     /files/etc/ssh/sshd_config/AcceptEnv[1]/1 = LANG
     /files/etc/aliases/1
     /files/etc/fstab/1
     /files/etc/pam.d/login/1
     /files/etc/pam.d/postgresql/1
     /files/etc/pam.d/newrole/1
     /files/etc/hosts/1
     /files/etc/inittab/1

test descendant-or-self /files/descendant-or-self :: 4
     /files/etc/ssh/sshd_config/AcceptEnv[1]/4 = LC_TIME
     /files/etc/aliases/4
     /files/etc/fstab/4
     /files/etc/pam.d/login/4
     /files/etc/pam.d/newrole/4
     /files/etc/inittab/4

test descendant /files/etc/aliases/4/descendant::4

test descendant-or-self-2 /files/etc/aliases/4/descendant-or-self::4
     /files/etc/aliases/4
